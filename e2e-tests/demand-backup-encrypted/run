#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

check_pvc_md5() {
    desc 'check backup file md5sum'
    apply_config "$test_dir/conf/client.yml"
    sleep 10
    bak_client_pod=$(
        kubectl_bin get pods \
            --selector=name=backup-client \
            -o 'jsonpath={.items[].metadata.name}'
    )
    wait_pod $bak_client_pod
    kubectl_bin exec $bak_client_pod -- \
        bash -c "cd /backup; md5sum -c md5sum.txt"
    kubectl_bin delete \
        -f $test_dir/conf/client.yml
}

run_backup() {
    local cluster=$1
    local backup1=$2

    desc 'make backup'
    kubectl_bin apply \
        -f $test_dir/conf/$backup1.yml
    wait_backup $backup1
}

run_recovery_check() {
    local cluster=$1
    local backup1=$2

    desc 'recover backup'
    kubectl_bin apply -f "$test_dir/conf/restore-${backup1}.yaml"
    wait_backup_restore ${backup1}
    kubectl_bin logs job/restore-job-${backup1}-${cluster}
    kubectl_bin delete -f "$test_dir/conf/restore-${backup1}.yaml"
    wait_for_running "$cluster-proxysql" 1
    wait_for_running "$cluster-pxc" 3

    sleep 20
    desc 'check data after backup'
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-pxc-0.$cluster-pxc -uroot -proot_password"
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-pxc-1.$cluster-pxc -uroot -proot_password"
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-pxc-2.$cluster-pxc -uroot -proot_password"

    if [ "$backup1" != "on-demand-backup-minio" ]; then
        desc 'copy backup'
        bash $src_dir/deploy/backup/copy-backup.sh $backup1 $tmp_dir/backup
    fi
}

main() {
    create_namespace $namespace
    deploy_operator
    kubectl_bin apply -f $conf_dir/cloud-secret.yml

    vault1="vault-service-1"
    start_vault $vault1
    init_vault $vault1

    cluster="some-name"
    spinup_pxc "$cluster" "$conf_dir/$cluster.yml"

    run_backup         "$cluster" "on-demand-backup-pvc"
    run_recovery_check "$cluster" "on-demand-backup-pvc"
    check_pvc_md5

    run_backup         "$cluster" "on-demand-backup-aws-s3"
    run_recovery_check "$cluster" "on-demand-backup-aws-s3"
    
    # mountpt=$(kubectl get -f "$conf_dir/vault-secret.yaml" -o json | grep -oP "secret_mount_point = \w+" | awk -F "=[ ]*" '{print $2}')
    # kubectl_bin config set-context "$(kubectl_bin config current-context)" --namespace="$vault1"
    # key=$(kubectl exec -it pod/$vault1-0 -- sh -c "export VAULT_TOKEN=$token && vault kv list $mountpt/backup/" | awk 'NR > 2 {print $1}' | grep -oP "[\w\d\-]+:\d+")
    # transition=$(kubectl exec -it pod/$vault1-0 -- sh -c "export VAULT_TOKEN=$token && vault kv get secret/backup/$key" | awk 'NR>3 {print $2}' | grep -oP "[\w\d]{3,}") 
    # kubectl_bin config set-context "$(kubectl_bin config current-context)" --namespace="$namespace"

    # vault2="vault-service-2"
    # start_vault $vault2
    # init_vault $vault2
    # kubectl_bin config set-context "$(kubectl_bin config current-context)" --namespace="$vault2"
    # token=$(jq -r ".root_token" <"$vault_init")
    # kubectl exec -it pod/$vault2-0 -- sh -c "export VAULT_TOKEN=$token && vault kv put $mountpt/backup/$key transition_key=${transition}"
    # kubectl_bin config set-context "$(kubectl_bin config current-context)" --namespace="$namespace"

    # run_recovery_check "$cluster" "on-demand-backup-pvc"
    # # run_recovery_check "$cluster" "on-demand-backup-aws-s3"

    # for i in $vault1 $vault2 ; do
    for i in $vault1 ; do
        kubectl delete --grace-period=0 --force=true namespace $i
        helm delete --purge $i
    done

    destroy $namespace
}

main
